class Main {
    function void main() {
        var Wave wave;
<<<<<<< Updated upstream
        var StepManager stepManager;
        var Princess princess;
=======
        var StepGenerator stepGen1, stepGen2, stepGen3, stepGen4, stepGen5, stepGen6;
        // var Princess princess;  // Commented out
>>>>>>> Stashed changes
        var boolean exit;
        var int i;
        var PrizeGenerator prizeGen;
        var int stepCounter;    // Counter for step movement timing

        let exit = false;
        let stepCounter = 0;

        let wave = Wave.new();
<<<<<<< Updated upstream
        let stepManager = StepManager.new(70, 200);    // First step
        let princess = Princess.new(stepManager);
        let prizeGen = PrizeGenerator.new(300, 150);  // Initialize prize generator
=======
        let stepGen1 = StepGenerator.new(70, 200);    // First step
        let stepGen2 = StepGenerator.new(155, 180);   // ~512/6 spacing
        let stepGen3 = StepGenerator.new(240, 160);
        let stepGen4 = StepGenerator.new(325, 180);
        let stepGen5 = StepGenerator.new(410, 160);
        let stepGen6 = StepGenerator.new(495, 180);
        let prizeGen = PrizeGenerator.new(800, 700);  // Initialize PrizeGenerator near the middle
        // let princess = Princess.new(stepGen1);  // Commented out
>>>>>>> Stashed changes

        while (~exit) {
            // Check for Enter key (key code 128)
            if (Keyboard.keyPressed() = 128) {
<<<<<<< Updated upstream
                do stepManager.startMoving();
                do prizeGen.startMoving();  // Start the prize generator
=======
                do stepGen1.startMoving();
                do stepGen2.startMoving();
                do stepGen3.startMoving();
                do stepGen4.startMoving();
                do stepGen5.startMoving();
                do stepGen6.startMoving();
                do prizeGen.startMoving();  // Start the prize generator movement
                // Generate random prizes (optional condition)
                
>>>>>>> Stashed changes
            }

            do prizeGen.generateRandomPrize(); // Continuously generate prizes
            // Update all game components
            do wave.updateWave();
<<<<<<< Updated upstream
            do princess.update();
            do stepManager.update(); // Steps move left
=======
            do stepGen1.update();
            do stepGen2.update();
            do stepGen3.update();
            do stepGen4.update();
            do stepGen5.update();
            do stepGen6.update();
>>>>>>> Stashed changes
            do prizeGen.update();  // Update prize movement
            do Sys.wait(12);       // Base game delay

            // Check for ESC key (key code 140)
            if (Keyboard.keyPressed() = 140) {
                let exit = true;
            }
        }        

        // Dispose of all objects
        do wave.dispose();
<<<<<<< Updated upstream
        do princess.dispose();
        do stepManager.dispose();
=======
        do stepGen1.dispose();
        do stepGen2.dispose();
        do stepGen3.dispose();
        do stepGen4.dispose();
        do stepGen5.dispose();
        do stepGen6.dispose();
>>>>>>> Stashed changes
        do prizeGen.dispose();

        return;
    }
}
