class Princess {
    field int xPos, yPos;     // Position
    field int width, height;  // Dimensions
    field int xVel;
    field int yVel;          // Vertical velocity
    field boolean isJumping;
    field StepGenerator step; // Reference to our step
    field boolean isDead;
	field boolean onPlatform;
	field Wave wave;
    // Constants

    constructor Princess new(StepGenerator stepRef) {
    	let wave = Wave.new();
		let isDead = false;
		let step = stepRef;
        // Size of princess hitbox
        let width = 2;
        let height = 23;
        
      // Initial position on the step
        let xPos = stepRef.getInitialX(); // Center on step
        let yPos = stepRef.getTopY()-1;      // Stand on top
        let yVel = 0;
		let xVel = 0;
        let isJumping = false;
		let onPlatform = true;
        // Draw initial position
        do drawPrincess(getMemLocation());

        return this;
    }

    method int getMemLocation() {
        return ((yPos * 32) + (xPos / 16));
    }

    method void update() {
		var int oldLocation, newLocation;

		let oldLocation = getMemLocation();
		do handleMovement();
    	do princessMovement();
        
    // Drawing update
    let newLocation = getMemLocation();
    if (~(oldLocation = newLocation)) {
        do erasePrincess(oldLocation);    // Use your erase method
        do drawPrincess(newLocation);     // Draw at new position
        }
        return;
    }
    
	method void handleMovement() {
    let xVel = 0;
    if (((Keyboard.keyPressed() = 130) & onPlatform) | (Keyboard.keyPressed() = 32) & (Keyboard.keyPressed() = 130)) { let xVel=-2; }
    if (((Keyboard.keyPressed() = 132) & onPlatform) | (Keyboard.keyPressed() = 32 & Keyboard.keyPressed() = 132)) { let xVel=2; }
	return;
	}

   method void princessMovement(){
		var int originaldy;
		var int footPosition; //track foot position 
		
		let onPlatform = false;
    	if (step.isStandingOn(xPos, width, yPos-1)) { let onPlatform = true; }

		if ((Keyboard.keyPressed() = 32) & onPlatform & (~(isJumping))) { 
		let yVel = -15; 
		let isJumping = true;
		let onPlatform = false;
		}
		if (isJumping) {
		let yVel = yVel + 1;  
		let yPos = yPos + yVel;
		let xPos = xPos + xVel; 
		}
		if (yVel > 0) {
			if (step.isStandingOn(xPos, width, yPos + yVel)){
			let isJumping = false;
			let yVel = 0;
			let yPos = step.getTopY()-1;
			let onPlatform = true;
			}
		} let xPos = xPos + xVel; 

		// Check if walked off platform
        if (~(step.isStandingOn(xPos, width, yPos))) {
            let onPlatform = false;  // Start falling if no platform below
            let yVel = 10;  // Start fall from rest
        }

		if (xPos < 0) { let xPos = 0; }
        if (xPos > (511 - width)) { let xPos = 511 - width; }

		return;
	}


    method void drawPrincess(int location) {
        var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress -704, 17472);
		do Memory.poke(memAddress -672, 27328);
		do Memory.poke(memAddress -640, 20800);
		do Memory.poke(memAddress -608, 16448);
		do Memory.poke(memAddress -576, 16448);
		do Memory.poke(memAddress -544, -32);
		do Memory.poke(memAddress -512, -16);
		do Memory.poke(memAddress -480, -3592);
		do Memory.poke(memAddress -448, -32712);
		do Memory.poke(memAddress -416, 8328);
		do Memory.poke(memAddress -384, 24);
		do Memory.poke(memAddress -352, 3608);
		do Memory.poke(memAddress -320, -16264);
		do Memory.poke(memAddress -288, -4);
		do Memory.poke(memAddress -256, -4);
		do Memory.poke(memAddress -224, 28);
		do Memory.poke(memAddress -192, 24799);
		do Memory.poke(memAddress -160, 12687);
		do Memory.poke(memAddress -128, 4367);
		do Memory.poke(memAddress -96, 8);
		do Memory.poke(memAddress -64, -8);
		do Memory.poke(memAddress -32, 4352);
		do Memory.poke(memAddress, 4352);
		// column 1
		do Memory.poke(memAddress -511, 1);
		do Memory.poke(memAddress -479, 3);
		do Memory.poke(memAddress -447, 3);
		do Memory.poke(memAddress -415, 2);
		do Memory.poke(memAddress -383, 3);
		do Memory.poke(memAddress -351, 3);
		do Memory.poke(memAddress -319, 3);
		do Memory.poke(memAddress -287, 7);
		do Memory.poke(memAddress -255, 7);
		do Memory.poke(memAddress -223, 7);
		do Memory.poke(memAddress -191, 31);
		do Memory.poke(memAddress -159, 30);
		do Memory.poke(memAddress -127, 30);
		do Memory.poke(memAddress -95, 2);
		do Memory.poke(memAddress -63, 3);
		return;
	}

    method void erasePrincess(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress -704, 0);
		do Memory.poke(memAddress -672, 0);
		do Memory.poke(memAddress -640, 0);
		do Memory.poke(memAddress -608, 0);
		do Memory.poke(memAddress -576, 0);
		do Memory.poke(memAddress -544, 0);
		do Memory.poke(memAddress -512, 0);
		do Memory.poke(memAddress -480, 0);
		do Memory.poke(memAddress -448, 0);
		do Memory.poke(memAddress -416, 0);
		do Memory.poke(memAddress -384, 0);
		do Memory.poke(memAddress -352, 0);
		do Memory.poke(memAddress -320, 0);
		do Memory.poke(memAddress -288, 0);
		do Memory.poke(memAddress -256, 0);
		do Memory.poke(memAddress -224, 0);
		do Memory.poke(memAddress -192, 0);
		do Memory.poke(memAddress -160, 0);
		do Memory.poke(memAddress -128, 0);
		do Memory.poke(memAddress -96, 0);
		do Memory.poke(memAddress -64, 0);
		do Memory.poke(memAddress -32, 0);
		do Memory.poke(memAddress, 0);
		do Memory.poke(memAddress -511, 0);
		do Memory.poke(memAddress -479, 0);
		do Memory.poke(memAddress -447, 0);
		do Memory.poke(memAddress -415, 0);
		do Memory.poke(memAddress -383, 0);
		do Memory.poke(memAddress -351, 0);
		do Memory.poke(memAddress -319, 0);
		do Memory.poke(memAddress -287, 0);
		do Memory.poke(memAddress -255, 0);
		do Memory.poke(memAddress -223, 0);
		do Memory.poke(memAddress -191, 0);
		do Memory.poke(memAddress -159, 0);
		do Memory.poke(memAddress -127, 0);
		do Memory.poke(memAddress -95, 0);
		do Memory.poke(memAddress -63, 0);
		return;
	}
	
	method boolean isDead() {
	if 	(wave.checkCollision(yPos)) {
		return true;
	} return false;
	}

	method int getCollisionTop() {
        return yPos;
    }

    method int getCollisionBottom() {
        return yPos + height;
    }

    method int getCollisionLeft() {
        return xPos;
    }

    method int getCollisionRight() {
        return xPos + width;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

}