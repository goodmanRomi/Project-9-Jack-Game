class Princess {
    field int xPos, yPos;     // Position
    field int width, height;  // Dimensions
    field int xVel;
    field int yVel;          // Vertical velocity
    field boolean isJumping;
    field StepGenerator step; // Reference to our step
    
    // Constants
    field int GRAVITY;
    field int JUMP_POWER;

    constructor Princess new(StepGenerator stepRef) {
    let step = stepRef;
        // Size of princess hitbox
        let width = 2;
        let height = 23;
        
        // Physics constants
        let GRAVITY = 3;
        let JUMP_POWER = -30;  // Negative because y increases downward

      // Initial position on the step
        let xPos = stepRef.getInitialX() - (width / 2); // Center on step
        let yPos = stepRef.getInitialY();      // Stand on top
        let yVel = 0;
        let isJumping = false;
        
        // Draw initial position
        do drawPrincess(getMemLocation());

        return this;
    }

    method int getMemLocation() {
        return ((yPos * 32) + (xPos / 16));
    }

    function void set_physics(int gravity, int jump_velocity) {
		let GRAVITY = gravity;
		let JUMP_POWER = jump_velocity;
		return;
	}
	function void update_jump(int change) {
		let JUMP_POWER = JUMP_POWER - (change + change + change + change + change); // jump - 5 * change
		if ((JUMP_POWER < (-45)) | (JUMP_POWER > (-15))) {let JUMP_POWER = -30;} // reset jump velocity if it is out of bounds
		return;
	}

	method void set_velocity(int vel) {
		let yVel = vel;
		return;
	}

    method void update() {
    var boolean onPlatform;
    var int oldLocation, newLocation;
    
    let oldLocation = getMemLocation();
    let onPlatform = step.isStandingOn(xPos, width, yPos);
    
    //handle horizontal movement
    let xVel = 0; //reset horizontal velocity
    if (Keyboard.keyPressed() = 130) {
        let xVel=-1;
    } 
    if (Keyboard.keyPressed()=132) {
        let xVel = 1;
    }

    // Handle jumping with space
    if (Keyboard.keyPressed() = 32) {  // Space bar
        if (onPlatform & (~isJumping)) {
            let yVel = JUMP_POWER;
            let isJumping = true;
        }
    }

    // Apply physics
        if (~onPlatform) {
            let yVel = yVel + GRAVITY;
            let yPos = yPos + yVel;
            let xPos = xPos + xVel ; 
        } else {
            if (yVel > 0) {  // If falling
                let yPos = step.getStandingY() - height;
                let yVel = 0;
                let isJumping = false;
            }

            let xPos = xPos + xVel;
        }
        
    // Drawing update
    let newLocation = getMemLocation();
    if (~(oldLocation = newLocation)) {
        do erasePrincess(oldLocation);    // Use your erase method
        do drawPrincess(newLocation);     // Draw at new position
        }
    
        return;
    }
    
    /* method int jump() {
		// only jump if on the ground 
		if (onPlatform & (~isJumping)) {
			let yVel = JUMP_POWER;
			return 5;
		}
		return -1;
	} */

    method void drawPrincess(int location) {
        var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress -704, 17472);
		do Memory.poke(memAddress -672, 27328);
		do Memory.poke(memAddress -640, 20800);
		do Memory.poke(memAddress -608, 16448);
		do Memory.poke(memAddress -576, 16448);
		do Memory.poke(memAddress -544, -32);
		do Memory.poke(memAddress -512, -16);
		do Memory.poke(memAddress -480, -3592);
		do Memory.poke(memAddress -448, -32712);
		do Memory.poke(memAddress -416, 8328);
		do Memory.poke(memAddress -384, 24);
		do Memory.poke(memAddress -352, 3608);
		do Memory.poke(memAddress -320, -16264);
		do Memory.poke(memAddress -288, -4);
		do Memory.poke(memAddress -256, -4);
		do Memory.poke(memAddress -224, 28);
		do Memory.poke(memAddress -192, 24799);
		do Memory.poke(memAddress -160, 12687);
		do Memory.poke(memAddress -128, 4367);
		do Memory.poke(memAddress -96, 8);
		do Memory.poke(memAddress -64, -8);
		do Memory.poke(memAddress -32, 4352);
		do Memory.poke(memAddress, 4352);
		// column 1
		do Memory.poke(memAddress -511, 1);
		do Memory.poke(memAddress -479, 3);
		do Memory.poke(memAddress -447, 3);
		do Memory.poke(memAddress -415, 2);
		do Memory.poke(memAddress -383, 3);
		do Memory.poke(memAddress -351, 3);
		do Memory.poke(memAddress -319, 3);
		do Memory.poke(memAddress -287, 7);
		do Memory.poke(memAddress -255, 7);
		do Memory.poke(memAddress -223, 7);
		do Memory.poke(memAddress -191, 31);
		do Memory.poke(memAddress -159, 30);
		do Memory.poke(memAddress -127, 30);
		do Memory.poke(memAddress -95, 2);
		do Memory.poke(memAddress -63, 3);
		return;
	}

    method void erasePrincess(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress -704, 0);
		do Memory.poke(memAddress -672, 0);
		do Memory.poke(memAddress -640, 0);
		do Memory.poke(memAddress -608, 0);
		do Memory.poke(memAddress -576, 0);
		do Memory.poke(memAddress -544, 0);
		do Memory.poke(memAddress -512, 0);
		do Memory.poke(memAddress -480, 0);
		do Memory.poke(memAddress -448, 0);
		do Memory.poke(memAddress -416, 0);
		do Memory.poke(memAddress -384, 0);
		do Memory.poke(memAddress -352, 0);
		do Memory.poke(memAddress -320, 0);
		do Memory.poke(memAddress -288, 0);
		do Memory.poke(memAddress -256, 0);
		do Memory.poke(memAddress -224, 0);
		do Memory.poke(memAddress -192, 0);
		do Memory.poke(memAddress -160, 0);
		do Memory.poke(memAddress -128, 0);
		do Memory.poke(memAddress -96, 0);
		do Memory.poke(memAddress -64, 0);
		do Memory.poke(memAddress -32, 0);
		do Memory.poke(memAddress, 0);
		do Memory.poke(memAddress -511, 0);
		do Memory.poke(memAddress -479, 0);
		do Memory.poke(memAddress -447, 0);
		do Memory.poke(memAddress -415, 0);
		do Memory.poke(memAddress -383, 0);
		do Memory.poke(memAddress -351, 0);
		do Memory.poke(memAddress -319, 0);
		do Memory.poke(memAddress -287, 0);
		do Memory.poke(memAddress -255, 0);
		do Memory.poke(memAddress -223, 0);
		do Memory.poke(memAddress -191, 0);
		do Memory.poke(memAddress -159, 0);
		do Memory.poke(memAddress -127, 0);
		do Memory.poke(memAddress -95, 0);
		do Memory.poke(memAddress -63, 0);
		return;
	}

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

}