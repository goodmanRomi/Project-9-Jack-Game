class StepGenerator {
    static int rightmost; // Tracks the rightmost step
    field int width;
    field int location;    // Left x-coordinate of the step
    field int destroy_location;
    field boolean isMoving;
    field int xStart;  // Add initial x position
    field int yStart;  // Add initial y position
    
    // Top-left corner of collision box
    field int tl0x;
    field int tl0y;
    
    // Bottom-right corner of collision box
    field int br0x;
    field int br0y;

    field boolean isGrowing;    // Track if we're in growing phase
    field int growthProgress;   // Track growth progress
    
    constructor StepGenerator new(int startX, int startY) {
        do LCGRandom.setSeed(1234);  // You can use any non-zero number as seed
        let xStart = startX;
        let yStart = startY;
        let rightmost = 40;
        let isGrowing = false;
        let isMoving = false;  // Start with no movement
        let growthProgress = 0;
        let br0x = LCGRandom.randRange(100, 400);
        let tl0y = LCGRandom.randRange(150, 205);
        let width = 70;
        let tl0x = br0x - width;
        let br0y = tl0y + 1;
    
        let location = br0x;
        let destroy_location = 0;
        let growthProgress = width;

        do createInitialStep(xStart, yStart);
        return this;
    }
    
    method void createInitialStep(int startX, int startY) {
    let width = 70;
    // Position roughly in middle of screen
    let br0x = startX;  
    let tl0y = startY;  
    let tl0x = br0x - width;  // Calculate left edge
    let br0y = tl0y + 1;
    
    let rightmost = br0x;
    let destroy_location = 0;
    let location = br0x;
    let isGrowing = false;  // Don't grow the initial step
    let growthProgress = width;  // Set to full width immediately

    // Draw the initial step
    do Screen.setColor(true);
    do Screen.drawRectangle(tl0x, tl0y, br0x, br0y);
    
    return;

    }

    method void startMoving() {
        let isMoving = true;
        return;
    }

    method void reset() {
        var int randHeight;

        // Check if this is the first movement after initial step
        if (isMoving & (br0x > 0) & (~(br0x > 80))) {  // If we're at initial position
        // Keep current y position and just move left
        return;
        }

        let width = 70;
        
         //Generate a random height between 150 and 250
        let randHeight = LCGRandom.randRange(150, 205);

         //Position the step on the left part 
        let br0x = 511;
        let tl0y = randHeight;
        let tl0x = br0x - width;
        let br0y = tl0y + 1;
        
        //Update the rightmost step
        let rightmost = br0x;
        
        //Set the destroy location
        let destroy_location = 0; 
        let location = br0x;

        //Initialize growing state
        let isGrowing = false;
        let growthProgress = width;
    
        return;
    }

    method int getInitialX() {
        return tl0x + (width / 2);  // Middle of the step
    }
    
    method int getInitialY() {
        return tl0y;  // Top of the step
    }

    
    method void update() {
        var int drawStart;
        
        if (~isMoving) {
            return;
        }

        // Handle growing phase
        if (isGrowing) {
            if (growthProgress < width) {
                // Erase previous
                do Screen.setColor(false);
                do Screen.drawRectangle(Math.max(0, tl0x), tl0y, Math.min(511, br0x), br0y);
                
                // Increase width by 1 pixel
                let growthProgress = growthProgress + 1;
                let tl0x  = br0x - growthProgress;
                
                // Draw new
                do Screen.setColor(true);
                do Screen.drawRectangle(Math.max(0, tl0x), tl0y, Math.min(511, br0x), br0y);
                return;
            } else {
                let isGrowing = false;
            }
        }

        // Normal movement phase
        if (~(br0x > 0)) {
            do reset(); 
        }

        // Erase current rectangle
        do Screen.setColor(false);
        if (tl0x < 0) {
            do Screen.drawRectangle(0, tl0y, Math.min(511, br0x), br0y);
        } else {
            do Screen.drawRectangle(Math.max(0, tl0x), tl0y, Math.min(511, br0x), br0y);
        }

         // Move the step to the left
        let location = location - 1;
        let tl0x = tl0x - 1;
        let br0x = br0x - 1;

        let drawStart = Math.max(0, tl0x);
         // Draw new rectangle, but only the visible part
        // Calculate valid starting x coordinate
         if (br0x > 0) {  // Only draw if right edge is still visible
            do Screen.setColor(true);
            do Screen.drawRectangle(drawStart, tl0y, br0x, br0y);
        }
        
        return;
    }


     method int getTopY() {
        return tl0y;
    }

    method int getBottomY() {
        return br0y;
    }
    
    method int getLeftX() {
        return tl0x;
    }

    method int getRightX() {
        return br0x;
    }

    method int getWidth() {
        return width;
    }
    

    method int getStandingY() {
        return tl0y;  // Position character right above the step
    }

    method boolean isStandingOn(int objectX, int objectWidth, int objectBottomY) {
    var int objectLeft, objectRight;
    var int stepTop, stepBottom;
    let objectLeft = objectX;
    let objectRight = objectX + objectWidth;
    let stepTop = tl0y - 2;  // Add small tolerance above step
    let stepBottom = tl0y + 2;  // Add small tolerance below step

    // First check vertical position (similar to Trex implementation)
        if (~(objectBottomY > stepTop & objectBottomY < stepBottom)) { 
        return false; 
        }

     // Then check horizontal overlap (similar to CactusCluster implementation)
        if (objectRight < tl0x) { return false; }  // Princess is completely to left
        if (objectLeft > br0x) { return false; }   // Princess is completely to right

        return true;
    }   
   

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}